`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 29.01.2020 10:34:23
// Design Name: 
// Module Name: MinMaxDecoding
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module minmaxdecoding(gamma,reset,clk,cw,enc,error);
/* PARAMETERS ARE DECLARED HERE*/
parameter col_weight=1;
parameter row_weight=2;
parameter N=6;
parameter M=3;
parameter Q=4;
parameter iter=10;
parameter GammaLen=95;

/*REGISTER DECLARATIONS*/
 reg [3:0] temp[(col_weight-1):0][3:0][5:0];//temporary register for storing beta values 
//(* dont_touch = "true" *) 
reg [3:0] tempg[3:0][(N-1):0];//temporary register for storing gamma value
//(* dont_touch = "true" *) 
reg [3:0] gammapost[3:0][5:0];// gamma post values after adding all the values
//(* dont_touch = "true" *) 
reg [1:0]codeword[5:0];// final codeword is here
//(* dont_touch = "true" *) 
reg [3:0]row_col[(col_weight-1):0][5:0];// row col will give index value of the row
//(* dont_touch = "true" *) 
reg [3:0]amin[(Q-1):0][(N-1):0];// it is used while doing variable processing
//(* dont_touch = "true" *) 
reg [3:0]tempo[(N-1):0];
//(* dont_touch = "true" *)
reg[3:0]ALPHAmn_[2:0][5:0][3:0];
//(* dont_touch = "true" *)
reg[3:0]B[3:0][1:0][M-1:0];
//(* dont_touch = "true" *)
reg[3:0]BETAmn_[2:0][5:0][3:0];
//(* dont_touch = "true" *)
reg[3:0]F[3:0][1:0][M-1:0];
//(* dont_touch = "true" *)
reg[3:0]state;
reg[3:0]iteration;
reg [0:95]Gamma;
reg [0:11]Enc;
reg [0:11]Cw;
reg [0:3]Error;
//reg Reset;


reg[1:0]row;
reg[1:0]H[M-1:0][N-1:0];
reg[2:0]col;
reg[2:0]col_row[2:0][1:0];
reg[2:0]a,c,b;
reg[1:0]inv_val;
reg[3:0] min_F[M-1:0];
reg[3:0]max_F[M-1:0];
reg[3:0]min_B[M-1:0];
reg[3:0]max_B[M-1:0];
reg[3:0]min_val;
reg[3:0]max_val;
reg[3:0] last_col;
reg[1:0]inv_valB;
reg[1:0]mul_valB,mul_val1;
reg[2:0]col_B;
reg[1:0]index_B;
reg[1:0]mul_val;
reg[1:0]index_c;
reg[2:0]i;
reg[5:0]j;
integer k;
integer p;




input [0:GammaLen]gamma;
input reset;
input[0:11]enc;
output reg [2:0]error;
input clk;
output reg [0:11]cw;
`define s0 5'd0
`define s1 5'd1
`define s2 5'd2
`define s3 5'd3
`define s4 5'd4
`define s5 5'd5
`define s6 5'd6
`define s7 5'd7
`define s8 5'd8
`define s9 5'd9



/* function declarations*/
function[3:0] max;
    input[3:0] p,q;
    if(p<q) max=q;
    else max=p;
    endfunction
    
function[3:0] min;
        input[3:0] p,q;
        if(p<q) min=p;
        else min=q;
        endfunction    


/* task declarations for mul and add*/

task mul_gf;// this one defines the multiplication for gf(4)  
input[1:0] A;
input[1:0]B;
output [1:0]Y;
begin
{Y[1],Y[0]}={(A[1] & B[0])^(A[0] & B[1])^(A[1] & B[1]),(A[0]&B[0])^(A[1] & B[1])};
end
endtask

task add_gf;// this one defines the addition for gf(4)   
input[1:0] A;//this is simply xor operation of bits
input [1:0]B;
output[1:0] out;
begin
out[0]=A[0]^B[0];
out[1]=A[1]^B[1];
end
endtask


/* the end of the tasks for add and mul*/

/* the task that gives us the inv of the input*/

task inv_gf;// this task computes the multiplicative inverse of a given number
input[1:0] A;
output[1:0] out;
begin
if(A==0)
out=2'd0;
else if(A==1)
out=2'd1;
else
out={A[1],~A[0]};
end
endtask


/* BELOW ARE THE TASKS REQD FOR POST PROC*/

task minimum_array;//task to find minimum in an array
input [3:0]col;//column value that will be passed onto here
reg [2:0]a;// register value a for galois field;
begin
      for(col = 0; col < 6; col=col+1)	// tentative decoding
			   begin
			      a = 0;// used in next step,for assumption of gammapost minimum to be first element
			        for(i = 0; i < Q; i=i+1)
			        begin
                         if(gammapost[i][col] < gammapost[a][col])//compare the gammapost value of each galios field specified by the column
					     a = i;// i will have the index of the minimum value which is galois field element 
				      end
				      begin
				  codeword[col] = a; // final codeword after tentative decoding   
				  //alpha_min[col]=gammapost[a][col];//gammapost minimum will be put into alphamin which is used to subtraction
               end
             end

              
end              
endtask



task variable;
input [3:0]col;
reg [2:0]a,c;
reg [3:0]gammacomp,tempcomp;
begin

begin
      for(c=0;c<col_weight;c=c+1)//number of beta equations are put into temporary registers
          begin
               row=row_col[c][col];//specific row where beta is having galios field values are 
               for(a=0;a<Q;a=a+1)//repeat for all galios elements
                   begin
                        temp[c][a][col]=BETAmn_[row][col][a];//temporary register which stores beta values for each galios field element
                        tempg[a][col]={Gamma[(((col*4)+a)*4)],Gamma[(((col*4)+a)*4)+1],Gamma[(((col*4)+a)*4)+2],Gamma[(((col*4)+a)*4)+3]};//temporary register which stores gamma values for each galios field element
                     end
          end
end

begin //addition process starts here 
     for(a=0;a<Q;a=a+1)//addition for each galios field element
         begin
              gammacomp=0;
              tempcomp=0;
              for(c=0;c<col_weight;c=c+1)
                  begin
                     gammacomp=gammacomp+temp[c][a][col];
                  end
              tempcomp=tempg[a][col];// gamma value of particular galios is put into temporary reg
              gammapost[a][col]=gammacomp+tempcomp;
         end         
end// addition process end here

begin// finding of minimum starts here
     for(c=0;c<col;c=c+1)
         minimum_array(col);// for each column
end//end of finding the minimum
//update_alpha;
end

endtask


/* variable node proc for each column*/



task variableproc1;//task called for each column
input [3:0]col;// function of column
reg [3:0]rowv,indexv,rowa,indexa,minindex;//this is local for each column
reg [2:0]a,c;// this is for the count 
begin
        for(indexv=0;indexv<col_weight;indexv=indexv+1)// indexv is to point the alpha of each column
             begin
                   rowv=row_col[indexv][col];// this will give the rowpointer value for the corresponding indexv of alpha
                          for(a=0;a<Q;a=a+1)// for all alpha
                               begin
                                    tempo[col]=0;// temporary register for each column
                                    indexa=0;// indexa is to beta, it resets for every a
                                    rowa=row_col[0][col];// this will give the rowpointer value for the corresponding indexa(0) of beta
                                    while(indexa<col_weight)// for a limit of column weight because it is sparse
                                         begin
                                               rowa=row_col[indexa][col];// // this will give the rowpointer value for the corresponding indexa of beta
                                               if(indexa!=indexv)//if index of alpha and beta won't match, add all the betas except indexv location
                                                  tempo[col]=tempo[col]+BETAmn_[rowa][col][a];
                                               indexa=indexa+1;
                                          end
                                      amin[a][col]=tempo[col]+{Gamma[(((col*4)+a)*4)],Gamma[(((col*4)+a)*4)+1],Gamma[(((col*4)+a)*4)+2],Gamma[(((col*4)+a)*4)+3]};//amin will have gamma and beta sum
                              end
                              minindex=0;//this is to start finding minimum value of amin[a][col]
                               for(c = 0; c <Q ; c=c+1)
                                    begin
                                     if(amin[c][col] < amin[minindex][col])
					                  	minindex = c;
					                 end
				                for(a=0;a<Q;a=a+1)
                                      ALPHAmn_[rowv][col][a]=amin[a][col]-amin[minindex][col];//alpha value is updated for every row and every a 
                    end           
 end
endtask   
















always@(posedge clk) begin
if(reset) begin
H[0][0]=2'd1;
H[0][1]=2'd0;
H[0][2]=2'd0;
H[0][3]=2'd0;
H[0][4]=2'd2;
H[0][5]=2'd0;

H[1][0]=2'd0;
H[1][1]=2'd2;
H[1][2]=2'd0;
H[1][3]=2'd0;
H[1][4]=2'd0;
H[1][5]=2'd3;

H[2][0]=2'd0;
H[2][1]=2'd0;
H[2][2]=2'd3;
H[2][3]=2'd1;
H[2][4]=2'd0;
H[2][5]=2'd0;



max_F[0]=0;
min_F[0]=0;    
max_F[1]=0;
min_F[1]=0;       
max_F[2]=0;
min_F[2]=0;
max_F[2]=0;
min_F[2]=0;


col_row[0][0]=8'd0;
col_row[0][1]=8'd4;
col_row[1][0]=8'd1;
col_row[1][1]=8'd5;
col_row[2][0]=8'd2;
col_row[2][1]=8'd3;



 BETAmn_[0][0][0]=0;
BETAmn_[0][0][1]=0;
BETAmn_[0][0][2]=0;
BETAmn_[0][0][3]=0;
BETAmn_[0][1][0]=0;
BETAmn_[0][1][1]=0;
BETAmn_[0][1][2]=0;
BETAmn_[0][1][3]=0;
BETAmn_[0][2][0]=0;
BETAmn_[0][2][1]=0;
BETAmn_[0][2][2]=0;
BETAmn_[0][2][3]=0;
BETAmn_[0][3][0]=0;
BETAmn_[0][3][1]=0;
BETAmn_[0][3][2]=0;
BETAmn_[0][3][3]=0;
BETAmn_[0][4][0]=0;
BETAmn_[0][4][1]=0;
BETAmn_[0][4][2]=0;
BETAmn_[0][4][3]=0;
BETAmn_[0][5][0]=0;
BETAmn_[0][5][1]=0;
BETAmn_[0][5][2]=0;
BETAmn_[0][5][3]=0;
BETAmn_[1][0][0]=0;
BETAmn_[1][0][1]=0;
BETAmn_[1][0][2]=0;
BETAmn_[1][0][3]=0;
BETAmn_[1][1][0]=0;
BETAmn_[1][1][1]=0;
BETAmn_[1][1][2]=0;
BETAmn_[1][1][3]=0;
BETAmn_[1][2][0]=0;
BETAmn_[1][2][1]=0;
BETAmn_[1][2][2]=0;
BETAmn_[1][2][3]=0;
BETAmn_[1][3][0]=0;
BETAmn_[1][3][1]=0;
BETAmn_[1][3][2]=0;
BETAmn_[1][3][3]=0;
BETAmn_[1][4][0]=0;
BETAmn_[1][4][1]=0;
BETAmn_[1][4][2]=0;
BETAmn_[1][4][3]=0;
BETAmn_[1][5][0]=0;
BETAmn_[1][5][1]=0;
BETAmn_[1][5][2]=0;
BETAmn_[1][5][3]=0;
BETAmn_[2][0][0]=0;
BETAmn_[2][0][1]=0;
BETAmn_[2][0][2]=0;
BETAmn_[2][0][3]=0;
BETAmn_[2][1][0]=0;
BETAmn_[2][1][1]=0;
BETAmn_[2][1][2]=0;
BETAmn_[2][1][3]=0;
BETAmn_[2][2][0]=0;
BETAmn_[2][2][1]=0;
BETAmn_[2][2][2]=0;
BETAmn_[2][2][3]=0;
BETAmn_[2][3][0]=0;
BETAmn_[2][3][1]=0;
BETAmn_[2][3][2]=0;
BETAmn_[2][3][3]=0;
BETAmn_[2][4][0]=0;
BETAmn_[2][4][1]=0;
BETAmn_[2][4][2]=0;
BETAmn_[2][4][3]=0;
BETAmn_[2][5][0]=0;
BETAmn_[2][5][1]=0;
BETAmn_[2][5][2]=0;
BETAmn_[2][5][3]=0;






ALPHAmn_[0][0][0]=8'd0;
ALPHAmn_[0][0][1]=8'd0;
ALPHAmn_[0][0][2]=8'd0;
ALPHAmn_[0][0][3]=8'd0;
ALPHAmn_[0][1][0]=8'd0;
ALPHAmn_[0][1][1]=8'd0;
ALPHAmn_[0][1][2]=8'd0;
ALPHAmn_[0][1][3]=8'd0;
ALPHAmn_[0][2][0]=8'd0;
ALPHAmn_[0][2][1]=8'd0;
ALPHAmn_[0][2][2]=8'd0;
ALPHAmn_[0][2][3]=8'd0;
ALPHAmn_[0][3][0]=8'd0;
ALPHAmn_[0][3][1]=8'd0;
ALPHAmn_[0][3][2]=8'd0;
ALPHAmn_[0][3][3]=8'd0;
ALPHAmn_[0][4][0]=8'd2;
ALPHAmn_[0][4][1]=8'd0;
ALPHAmn_[0][4][2]=8'd0;
ALPHAmn_[0][4][3]=8'd0;
ALPHAmn_[0][5][0]=8'd0;
ALPHAmn_[0][5][1]=8'd0;
ALPHAmn_[0][5][2]=8'd0;
ALPHAmn_[0][5][3]=8'd0;
ALPHAmn_[1][0][0]=8'd0;
ALPHAmn_[1][0][1]=8'd0;
ALPHAmn_[1][0][2]=8'd0;
ALPHAmn_[1][0][3]=8'd0;
ALPHAmn_[1][1][0]=8'd0;
ALPHAmn_[1][1][1]=8'd0;
ALPHAmn_[1][1][2]=8'd0;
ALPHAmn_[1][1][3]=8'd0;
ALPHAmn_[1][2][0]=8'd0;
ALPHAmn_[1][2][1]=8'd0;
ALPHAmn_[1][2][2]=8'd0;
ALPHAmn_[1][2][3]=8'd0;
ALPHAmn_[1][3][0]=8'd0;
ALPHAmn_[1][3][1]=8'd0;
ALPHAmn_[1][3][2]=8'd0;
ALPHAmn_[1][3][3]=8'd0;
ALPHAmn_[1][4][0]=8'd0;
ALPHAmn_[1][4][1]=8'd0;
ALPHAmn_[1][4][2]=8'd0;
ALPHAmn_[1][4][3]=8'd0;
ALPHAmn_[1][5][0]=8'd0;
ALPHAmn_[1][5][0]=8'd0;
ALPHAmn_[1][5][1]=8'd0;
ALPHAmn_[1][5][2]=8'd0;
ALPHAmn_[1][5][3]=8'd0;
ALPHAmn_[2][0][0]=8'd0;
ALPHAmn_[2][0][1]=8'd0;
ALPHAmn_[2][0][2]=8'd0;
ALPHAmn_[2][0][3]=8'd0;
ALPHAmn_[2][1][0]=8'd0;
ALPHAmn_[2][1][1]=8'd0;
ALPHAmn_[2][1][2]=8'd0;
ALPHAmn_[2][1][3]=8'd0;
ALPHAmn_[2][2][0]=8'd0;
ALPHAmn_[2][2][1]=8'd0;
ALPHAmn_[2][2][2]=8'd0;
ALPHAmn_[2][2][3]=8'd0;
ALPHAmn_[2][3][0]=8'd0;
ALPHAmn_[2][3][1]=8'd0;
ALPHAmn_[2][3][2]=8'd0;
ALPHAmn_[2][3][3]=8'd0;
ALPHAmn_[2][4][0]=8'd0;
ALPHAmn_[2][4][1]=8'd0;
ALPHAmn_[2][4][2]=8'd0;
ALPHAmn_[2][4][3]=8'd0;
ALPHAmn_[2][5][0]=8'd0;
ALPHAmn_[2][5][1]=8'd0;
ALPHAmn_[2][5][2]=8'd0;
ALPHAmn_[2][5][3]=8'd0;


state=`s0;


 row_col[0][0]=4'd0;
row_col[0][1]=4'd1;
row_col[0][2]=4'd2;
row_col[0][3]=4'd2;
row_col[0][4]=4'd0;
row_col[0][5]=4'd1;



   gammapost[0][0]=4'd0;
   gammapost[0][1]=4'd0;
   gammapost[0][2]=4'd0;
   gammapost[0][3]=4'd0;
   gammapost[0][4]=4'd0;
   gammapost[0][5]=4'd0;
   gammapost[1][0]=4'd0;
   gammapost[1][1]=4'd0;
   gammapost[1][2]=4'd0;
   gammapost[1][3]=4'd0;
   gammapost[1][4]=4'd0;
   gammapost[1][5]=4'd0;
   gammapost[2][0]=4'd0;
   gammapost[2][1]=4'd0;
   gammapost[2][2]=4'd0;
   gammapost[2][3]=4'd0;
   gammapost[2][4]=4'd0;
   gammapost[2][5]=4'd0;
   gammapost[3][0]=4'd0;
   gammapost[3][1]=4'd0;
   gammapost[3][2]=4'd0;
   gammapost[3][3]=4'd0;
   gammapost[3][4]=4'd0;
   gammapost[3][5]=4'd0;
   
   tempg[0][0]=4'd0;
   tempg[0][1]=4'd0;
   tempg[0][2]=4'd0;
   tempg[0][3]=4'd0;
   tempg[0][4]=4'd0;
   tempg[0][5]=4'd0;
   tempg[1][0]=4'd0;
   tempg[1][1]=4'd0;
   tempg[1][2]=4'd0;
   tempg[1][3]=4'd0;
   tempg[1][4]=4'd0;
   tempg[1][5]=4'd0;
   tempg[2][0]=4'd0;
   tempg[2][1]=4'd0;
   tempg[2][2]=4'd0;
   tempg[2][3]=4'd0;
   tempg[2][4]=4'd0;
   tempg[2][5]=4'd0;
   tempg[3][0]=4'd0;
   tempg[3][1]=4'd0;
   tempg[3][2]=4'd0;
   tempg[3][3]=4'd0;
   tempg[3][4]=4'd0;
   tempg[3][5]=4'd0;  
   
 temp[0][0][0]=4'd0;
     temp[0][0][1]=4'd0;
     temp[0][0][2]=4'd0;
     temp[0][0][3]=4'd0;
     temp[0][0][4]=4'd0;
     temp[0][0][5]=4'd0;
     temp[0][1][0]=4'd0;
     temp[0][1][1]=4'd0;
     temp[0][1][2]=4'd0;
     temp[0][1][3]=4'd0;
     temp[0][1][4]=4'd0;
     temp[0][1][5]=4'd0;
     temp[0][2][0]=4'd0;
     temp[0][2][1]=4'd0;
     temp[0][2][2]=4'd0;
     temp[0][2][3]=4'd0;
     temp[0][2][4]=4'd0;
     temp[0][2][5]=4'd0;
     temp[0][3][0]=4'd0;
     temp[0][3][1]=4'd0;
     temp[0][3][2]=4'd0;
     temp[0][3][3]=4'd0;
     temp[0][3][4]=4'd0;
     temp[0][3][5]=4'd0; 






end
else
case(state)
`s0: begin
iteration=4'd10;
      for(c=0;c<col_weight;c=c+1) begin//this is to access row col 
        for(col=0;col<6;col=col+1)// each column is filled
           begin
                row=row_col[c][col];// rowcol is necessary to access only non zero rows of the alpha
                for(a=0;a<Q;a=a+1)// each galois field is filled
                    ALPHAmn_[row][col][a]={Gamma[(((col*4)+a)*4)],Gamma[(((col*4)+a)*4)+1],Gamma[(((col*4)+a)*4)+2],Gamma[(((col*4)+a)*4)+3]};// alpha is filled here
           end
           
end

row=0;
col=0;
a=0;
b=0;
c=0;
index_c=0;




     state=`s1;
     end
     
`s1:      begin
     for(row=0;row<M;row=row+1) begin
     for(a=0;a<Q;a=a+1) begin
     col=col_row[row][0];
     inv_gf(H[row][col],inv_val); 
     
     mul_gf(inv_val,a,mul_val); 
     F[a][0][row]<=ALPHAmn_[row][col][mul_val];
     
     last_col=col_row[row][row_weight-1];
     inv_gf(H[row][last_col],inv_valB);
     mul_gf(inv_valB,a,mul_valB);
     B[a][row_weight-1][row]=ALPHAmn_[row][last_col][mul_valB];
     
     end
    // end
     
     // if(Q>4) begin
       //index_c=index_c+1;
      // row=0;
      // c=0;
      // a=0;
       // col=col_row[row][index_c];
         //   min_F[row]=max(F[c][index_c-1][row],ALPHAmn_[row][col][0]);
          //  b=1;
          //  state=`s2;
           // end
           // else
            //state=`s4;
            // for(row=0;row<M;row=row+1) begin
   for(index_c=0;index_c<row_weight;index_c=index_c+1) begin
   col=col_row[row][index_c];
   
  if(index_c==0) begin
  
   for(a=0;a<Q;a=a+1) begin
   mul_gf(H[row][col],a,mul_val);
   BETAmn_[row][col][a]=B[mul_val][index_c+1][row]; 
   end
   
   end
   
      
           
            
            
            else if(index_c==row_weight-1) begin 
             for(a=0;a<Q;a=a+1) begin
                    mul_gf(H[row][col],a,mul_val);
                    BETAmn_[row][col][a]=F[mul_val][index_c-1][row];
                    end
                    end
                    
                    
                    else begin
                    for(c=0;c<Q;c=c+1) begin
                    mul_gf(H[row][col],c,mul_val);
                    min_val=max(F[mul_val][index_c-1][row],B[0][index_c+1][row]);
                    for(b=0;b<Q;b=b+1) begin
                    mul_gf(H[row][col],c,mul_val);
                    add_gf(b,mul_val,a);
                    max_val=max(F[a][index_c-1][row],B[b][index_c+1][row]);
                    min_val=min(max_val,min_val);
                    end
                    BETAmn_[row][col][c]=min_val;
                    end                                        
                    end
                    end
                    end
                    for(col=0;col<N;col=col+1)begin
               variableproc1(col);
               end
               //state=`s6;      
               
                   for(col=0;col<N;col=col+1)begin
               variable(col);
               end
               iteration=iteration-1;
                if(iteration==0)
                 state=`s7;
                 else
                 state=`s1;   
            
            
            
     
     end
     
//`s2:  begin
  //     for(row=0;row<M;row=row+1) begin
    //   for(index_c=1;index_c<row_weight;index_c=index_c+1) begin
      // for(c=0;c<Q;c=c+1) begin
      // for(b=1;b<Q;b=b+1) begin
           
        //    mul_gf(H[row][col],b,mul_val1);
          //  add_gf(mul_val1,c,a);
          //  max_F[row]=max(F[a][index_c-1][row],ALPHAmn_[row][col][b]);
            //min_F[row]=min(min_F[row],max_F[row]);
            // end
              //   F[c][index_c][row]=min_F[row];
                       
              //             col=col_row[row][index_c];
                //                 min_F[row]=max(F[c][index_c-1][row],ALPHAmn_[row][col][0]);
                            
                           
                  //         end
                    //    end
                      //  end
                        ///    row=0;
                           // index_c=1;
                           // index_B=row_weight-index_c-1;
                            //       col_B=col_row[row][index_B];
                            
                              //      min_B[row]=max(ALPHAmn_[row][col_B][0],B[c][index_B+1][row]);
                              
                                //        state=`s3;
                                  
              
                 // end     
         
 
//`s3:
//begin
//     for(row=0;row<M;row=row+1) begin
//     for(index_c=1;index_c<row_weight;index_c=index_c+1) begin
//    for (c=0;c<Q;c=c+1) begin
//    for(b=0;b<Q;b=b+1) begin
//          mul_gf(H[row][col_B],b,mul_val);
//         add_gf(mul_val,c,a);
//         max_B[row]=max(B[a][index_B+1][row],ALPHAmn_[row][col_B][b]);
//         min_B[row]=min(min_B[row],max_B[row]);
          
//          end
           
//            B[c][index_B][row]=min_B[row];
            
                
//                 min_B[row]=max(ALPHAmn_[row][col_B][0],B[c][index_B+1][row]);
                     
//                       end
//                     end
//                     end
//                   index_c=0;
//                   row=0;
//                            col=col_row[row][0];
//                            state=`s4;
                 
//                 end 
                 
`s4:                  
           begin
   for(row=0;row<M;row=row+1) begin
   for(index_c=0;index_c<row_weight;index_c=index_c+1) begin
   col=col_row[row][index_c];
   
  if(index_c==0) begin
  
   for(a=0;a<Q;a=a+1) begin
   mul_gf(H[row][col],a,mul_val);
   BETAmn_[row][col][a]=B[mul_val][index_c+1][row]; 
   end
   
   end
   
      
           
            
            
            else if(index_c==row_weight-1) begin 
             for(a=0;a<Q;a=a+1) begin
                    mul_gf(H[row][col],a,mul_val);
                    BETAmn_[row][col][a]=F[mul_val][index_c-1][row];
                    end
                    end
                    
                    
                    else begin
                    for(c=0;c<Q;c=c+1) begin
                    mul_gf(H[row][col],c,mul_val);
                    min_val=max(F[mul_val][index_c-1][row],B[0][index_c+1][row]);
                    for(b=0;b<Q;b=b+1) begin
                    mul_gf(H[row][col],c,mul_val);
                    add_gf(b,mul_val,a);
                    max_val=max(F[a][index_c-1][row],B[b][index_c+1][row]);
                    min_val=min(max_val,min_val);
                    end
                    BETAmn_[row][col][c]=min_val;
                    end                                        
                    end
                    end
                    end
                    for(col=0;col<N;col=col+1)begin
               variableproc1(col);
               end
               //state=`s6;      
               
                   for(col=0;col<N;col=col+1)begin
               variable(col);
               end
               iteration=iteration-1;
                if(iteration==0)
                 state=`s7;
                 else
                 state=`s1;                          
                          
                          
                          
                           
 //                          state=`s5;
  
 
    end      
 
 
 
 
         
`s5:           begin
//               for(col=0;col<N;col=col+1)begin
//               variableproc1(col);
//               end
//               state=`s6;
               end
  
 `s6: begin
//             for(col=0;col<N;col=col+1)begin
//               variable(col);
//               end
//               iteration=iteration-1;
//                if(iteration==0)
//                 state=`s7;
//                 else
//                 state=`s1;
      end         
 
 
   
  
               

`s7:                       begin
                        j=0;
                          for(col=0;col<6;col=col+1) begin
                          {Cw[(j)],Cw[j+1]}=codeword[col];
                           // state=`s7;
                           j=j+2;
                           end
                           Error=0;
                           
                           for(j=M*2;j<11;j=j+2)
                           begin
                          if(((Enc[j]^Cw[j])||((Enc[j+1]^Cw[j+1])))==1)
                                              
                           Error=Error+1;
                           end
                           
                           
                           
                           state=`s8;
                           end
  `s8: begin
  state=`s8;
  end
                           
endcase
end

always@(posedge clk)
begin


Gamma<=gamma;
Enc<=enc;
end



always@(posedge clk) begin
cw<=Cw;
error<=Error;

end




               


endmodule
